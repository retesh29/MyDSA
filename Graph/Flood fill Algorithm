class Solution
{
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor)
    {
        
        int n = image.length;
        int m = image[0].length;
        
        boolean[][] visited = new boolean[n][m];
         
        int initiColor = image[sr][sc];
        //  4 direction neighbour indexing 
        int delRow[] ={ -1, 0, 1, 0};
        int delCol[] ={  0, 1, 0, -1};
        
        dfs(sr,sc, visited ,image, newColor,delRow, delCol,initiColor);
        return image;
        
    }
    
    void dfs(int row, int col,boolean[][] visited,int[][] image, int newColor,int[] delRow, int[] delCol, int initiColor ){
        
        int n = image.length;
        int m = image[0].length;
        
        
        
        // fill the new color
        image[row][col] = newColor;
        visited[row][col] = true;
        // check for 4 direction neighbour
        
        for(int i =0; i < 4; i++){
            
            int nrow = row + delRow[i];
            int ncol =  col + delCol[i];
            
            
            // call for neighbout
            // check neighbour under array 
            
            if( (nrow < n && nrow >=0) && (ncol < m && ncol >= 0) ){
                
                if( image[nrow][ncol] == initiColor &&  !visited[nrow][ncol] ){
                    
                    
                    dfs(nrow, ncol, visited, image, newColor, delRow, delCol, initiColor);
                }
            }
            
        }
    
        
    }
}
