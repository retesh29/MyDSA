class Solution{
    static int equalPartition(int N, int arr[])
    {
        // 
        
        // find the total sum
        
        int totalSum = 0;
        
        for(int i =0; i <N; i++){
            
            totalSum += arr[i];
            
        }
        // sum is odd then you never make half
        
        if( totalSum %2 != 0){
            
            return 0;
        }
        
        // than find any one can maek sum /2
        
        int sum = totalSum /2;
        
           // base case 
        boolean[][] dp = new boolean[N][sum +1];
        
        
        // step 2 base case iniliziaino
        // for all index if target == 0 hai means true
        
        for(int i = 0; i < N;i++){
            
            dp[i][0] = true;
        }
        
        //  last elemet hai or target v same hai
        if (arr[0] <= sum) {
            
            dp[0][arr[0]] = true;
        }
        // no. of stat == no of loop
        
        for(int i = 1; i < N; i++){
            
            // every sum k liye condition
            for(int target = 1; target <= sum ; target++ ){
                
                
                
                boolean notPick = dp[i-1][target];
        
        //chekc value is badi to ni hai sum 
        
                boolean pick = false;
        
                if( arr[i] <= target){
            
                   pick = dp[i-1][target - arr[i] ];
                } 
                
                
                dp[i][target] = (notPick|| pick);
                  
                
            }
        }
        
        return ( dp[N-1][sum] ) ? 1:0;
    }
}

============


class Solution{
    static int equalPartition(int N, int arr[])
    {
        // 
        
        // find the total sum
        
        int totalSum = 0;
        
        for(int i =0; i <N; i++){
            
            totalSum += arr[i];
            
        }
        // sum is odd then you never make half
        
        if( totalSum %2 != 0){
            
            return 0;
        }
        
        // than find any one can maek sum /2
        
        int sum = totalSum /2;
        
           // base case 
            int[][] dp = new int[N+1][sum +1];
        
        for(int i =0; i < N+1; i++){
            
            for(int j =0; j < sum +1; j++){
                
                dp[i][j] = -1;
            }
        }
        
        return  ( findTarget(N-1,sum,arr, dp) ) ? 1:0;
    }
    
    static boolean findTarget(int idx, int sum,int[] arr,  int[][] dp){
        
        // baser case
        
        if(sum == 0){
            
            return true;
        }
        
        if(idx == 0) {
            
            // last elemet to sum k barabber ni hai
            if(arr[idx] == sum){
                
                return true;
            }else{
                
                return false;
            }
            
          
        }
        
        if( dp[idx][sum] != -1){
            
            return (dp[idx][sum] == 0)? false: true;
        }
        
        //pick and don't pick algo
        
        boolean notPick = findTarget(idx-1, sum, arr,dp);
        
        //chekc value is badi to ni hai sum 
        
        boolean pick = false;
        
        if( arr[idx] <= sum){
            
            pick = findTarget(idx-1, sum - arr[idx], arr,dp );
        } 
        
        
        // chekc for both
        
        if( pick || notPick ){
            
            dp[idx][sum] = 1;
            
        }else{
             dp[idx][sum] = 0;
        }
        
        return (pick || notPick);
        
    }
    
}
