
class Solution{
    
    int mod = (int) 1e9 +7 ;

	public int perfectSum(int arr[],int N, int sum) 
	{ 
	      // base case 
        int[][] dp = new int[N][sum +1];
        
        
        // step 2 base case iniliziaino
        
        if(arr[0] == 0){
        
                dp[0][0] = 2;
        }else{
            
            dp[0][0] = 1;
        }

        
        if( arr[0] != 0 && arr[0] <= sum){
            
            dp[0][ arr[0] ] = 1;
        }
        
        
        // no. of stat == no of loop
        
        for(int i = 1; i < N; i++){
            
            // every sum k liye condition
            for(int target = 0 ; target <= sum ; target++ ){
                
                
                
                int notPick = dp[i-1][target];
        
        //chekc value is badi to ni hai sum 
        
                int pick = 0;
        
                if( arr[i] <= target){
            
                   pick = dp[i-1][target - arr[i] ];
                } 
                
                
                dp[i][target] = (notPick + pick) % mod;
                  
                
            }
        }
        
        return dp[N-1][sum];
        
   
	} 
}


===============================================================
T= N*sum

class Solution{
    
    int mod = (int)1e9 + 7;
	public int perfectSum(int arr[],int N, int sum) 
	{ 
	    
        // code here
        
        // base case 
        int[][] dp = new int[N][sum +1];
        
        for(int i = 0; i < N; i++){
            
            for(int j =0; j < sum +1; j++){
                
                dp[i][j] = -1;
            }
        }
        
        return findTarget(N-1,sum,arr, dp);
    }
    
     int findTarget(int idx, int sum,int[] arr,  int[][] dp){
        
        // baser case
        
        
        
        if(idx == 0) {
            
            // sum == 0 or end m pahuch gay
            if(sum == 0 && arr[0] == 0){
            
              return 2;
            }
            
            if(sum == 0 || arr[0] == sum){
            
               return 1;
            
            }
            
            
            return 0;
           
            
          
        }
        
        if( dp[idx][sum] != -1){
            
            return dp[idx][sum];
        }
        
        //pick and don't pick algo
        
        int notPick = findTarget(idx-1, sum, arr,dp);
        
        //chekc value is badi to ni hai sum 
        
        int pick = 0;
        
        if( arr[idx] <= sum){
            
            pick = findTarget(idx-1, sum - arr[idx], arr,dp );
        } 
        
        
        // chekc for both
        
        
        
        return dp[idx][sum] = (pick + notPick) % mod;
        
    
   
	} 
}
