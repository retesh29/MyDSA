// or Maximum Sum of Non-Adjacent Elements


// space oprimazion converion 



class TUF {
    // This function finds the maximum possible sum of non-adjacent elements in an array
    // using a more space-efficient dynamic programming approach.
    static int solve(int n, int[] arr) {
        // Initialize variables to keep track of the maximum sums at the current and previous positions.
        int prev = arr[0];
        int prev2 = 0;

        // Iterate through the array starting from the second element.
        for (int i = 1; i < n; i++) {
            // Calculate the maximum sum by either picking the current element or not picking it.
            int pick = arr[i];

            // If there are at least two elements before the current element, add the value from prev2.
            if (i > 1)
                pick += prev2;

            // The non-pick option is to use the maximum sum from the previous position.
            int nonPick = prev;

            // Calculate the maximum sum for the current position and update prev and prev2.
            int cur_i = Math.max(pick, nonPick);
            prev2 = prev;
            prev = cur_i;
        }

        // The 'prev' variable now holds the maximum possible sum.
        return prev;
    }

=================================================
t =O (N);
S = O (N);
// bottom up
public class Solution {

	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
	
		int[] dp = new int[nums.size()];
		
		// base case inilziaiton
		dp[0] = nums.get(0);
		

		for(int i = 1 ; i < dp.length; i++){
             
			 int pick = nums.get(i);
			 if( i > 1){

                pick += dp[i -2];
			 }
			 
			int notpick =  0 + dp[i -1 ];  
			 

			 dp[i] = Math.max(pick, notpick) ;
		
		     
		}

		return dp[dp.length- 1];
	}

}

=================================
// using top down


public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		// Write your code here.
		int[] dp = new int[nums.size()];
		for(int i =0; i < dp.length; i++){

			dp[i] = -1;
		}

		return f(nums.size()-1 , nums, dp);
	}

	static int f(int idx,ArrayList<Integer> nums,int[] dp  ){

		// base 

		if( idx == 0 ) return nums.get(idx);
		if( idx < 0 ) return 0;
		if( dp[idx] != -1) return dp[idx];

		int pick = nums.get(idx) + f(idx -2 , nums, dp);
		int notpick =  0 + f(idx -1 , nums, dp);

		return dp[idx] = Math.max(pick,notpick);
	}
}


================================================================

// by recursion


public class Solution {
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		// Write your code here.
		int[] dp = new int[nums.size()];
		for(int i =0; i < dp.length; i++){

			dp[i] = -1;
		}

		return f(nums.size()-1 , nums, dp);
	}

	static int f(int idx,ArrayList<Integer> nums,int[] dp  ){

		// base 

		if( idx == 0 ) return nums.get(idx);
		if( idx < 0 ) return 0;
		if( dp[idx] != -1) return dp[idx];

		int pick = nums.get(idx) + f(idx -2 , nums, dp);
		int notpick =  0 + f(idx -1 , nums, dp);

		return Math.max(pick,notpick);
	}
}
