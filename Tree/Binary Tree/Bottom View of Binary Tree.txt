// there are two method by recursion and bfs
// tm = N long n


===================================================
// using the BFS
public ArrayList <Integer> bottomView(Node root){
 
        //to store the ans
        ArrayList <Integer> ans = new ArrayList <Integer>();
        
        /// pair for horizontal distance and ans correspoding the hd
        // here don't need of worry about level order because we are using the level order traversal
        
        TreeMap<Integer, Integer > map = new TreeMap<>();
        
        // q for bfs
        
        Deque<Pair> q = new LinkedList<>();
        
        q.add(new Pair(0,root));
        
        
        while( !q.isEmpty()){
            
        
                Pair curr = q.poll();
                
                // fetching hd and node data 
                
                int hd = curr.hd;
                Node node = curr.node;
                
                // pushing the map 
            
                map.put( hd , node.data  );
                
                
                // now add th left and righ element of the root
                
                if(node.left != null){
                    
                    q.add(new Pair(hd-1, node.left));
                }
                if(node.right != null){
                    
                    q.add(new Pair(hd+1, node.right));
                }
        //    }
            
        }
        
        // now fetch the all arraylist according the hd and add the arrayList and;
        
        for( Integer e: map.values() ){
            

               
               ans.add(e);
       
        }
        
        return ans;
        
        
    }
    
    static class Pair{
        
        int hd;
        Node node;
        
        Pair(int hd, Node node){
            
            this.hd = hd;
            this.node = node;
        }
    }        // intition had

===========================================================================

// using the recursion

 public ArrayList <Integer> bottomView(Node root)
    
    {
        
        ArrayList <Integer> ans = new ArrayList <Integer>();
        
        TreeMap<Integer, Pair> map = new  TreeMap<Integer,Pair>();
        
        if(root == null ) return ans;
        
        solve(root,0,0, map ,ans);
        
        for(Pair e: map.values()){
            
            ans.add(e.node.data);
            
        }
        
        return ans;
        
    }
    
    
    void solve( Node root, int hd,int vd,  TreeMap<Integer,Pair> map,  ArrayList <Integer> ans ){
        
        
        if( root == null ){
            
            return ;
        }
        
        if(!map.containsKey(hd)){
            
            map.put(hd, new Pair(vd,root));
        
            
        }else{
          
           if( map.get(hd).vd <= vd) {
               
               map.get(hd).vd = vd;
               map.get(hd).node = root;
           } 
        }
        
        if(root.left != null){
            
            solve(root.left, hd-1, vd +1, map, ans);
        }
        
        if(root.right != null){
            
            solve(root.right, hd+1, vd + 1, map, ans);
        }
        
        
        
    }
    
    
    
    
  static class Pair{
        
        int vd;
        Node node;
        
        Pair(int vd, Node node){
            
            this.vd = vd;
            this.node = node;
        }
    }      
    
