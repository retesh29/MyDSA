public class Heap {

	//heap using the array 
	
	int[] arr = new int[100];
	int size = 0;
	
	// insert function
	
	void insert(int val) {
		
		
		
		// insertion value index for the 
		int idx = size++; 
		
		arr[idx] = val; 	
		
		// taking it to its correct postion
		
		while( idx >= 0) {
			
			// find the parent index
			int parent = (idx -1) /2;
			
			// checking the parent is smaller then curr element 
			// yes thean swap
			
			if(arr[parent] < arr[idx]) {
				
				swap(parent, idx, arr);
				//udate index
				idx = parent;
				
			}else {
				
				return;
			}
			
		}
		
	}
	
	// to delete the elment in heaap
	// head always delete root of the tree
	void deleteMaxHeap() {
		
		// if heap is already empty
		if(size <= 0 ) return ; 	
		
		//step 1 ; replace the last node to first node
		
		swap(0,size-1, arr);
		//step 2; delete the last node
		
		arr[size-1]  = 0;
		size--;
		
		// step 3: currect the positin of the root node
		
		int i = 0;
		
		while(i < size) {
			
			//find index of left and right child
			
			int leftChild = i *2 + 1;
			int rightChild = i * 2 + 2;
			
			if(arr[leftChild] > arr[i]  && leftChild < size) {
				
				swap(leftChild , i , arr);
				i = leftChild;
			
			}else if(arr[rightChild] > arr[i]  && rightChild < size) {
				
				swap(rightChild , i , arr);
				i = rightChild;
			}else {
				
				return;
			}
		}
	}
	
	
	// heapify
	// to correct the properti of heap
	// or convert CBT to heap
	// n = size of the array
	
	
	
	void swap(int i , int j , int [] arr) {
		
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}
	
	void printHeap() {
		
		for(int i =0; i < size ; i++) {
			
			System.out.print(arr[i] + " ");
		}
	}
	

}
