class Solution
{
    //Function to buisd a Heap from array.
    void buildHeap(int arr[], int n)
    {
        // Your code here
        for(int i = (n/2) -1; i >= 0 ; i--){
            
            heapify(arr, n, i);
        }       
        
    }
 
    //Heapify function to maintain heap property.
    void heapify(int arr[], int n, int i)
    {
        if( n < 0 ) return;
        
        // assuming curr is smassest
        int s = i;
        
        // finging the seft and right
        
        int left = (i*2)+1;
        int right = (i*2)+2;
        
        // cheing the seft and right is contain smassest
        
        if(left < n && arr[left] >= arr[s] ){
            
            s = left;
            
        }
        
        if(right < n && arr[right] >= arr[s] ){
            
            s = right;
            
        }
        
        if(s != i){
            
            swap(i, s, arr);
            
             
            heapify(arr,n,s);
        }       
    }
    
    void swap( int i , int s,int[] arr){
        
        int temp = arr[i];
        
        arr[i] = arr[s];
        arr[s] = temp;
    }
    

    
    //Function to sort an array using Heap sort.
    public void heapSort(int arr[], int n)
    {
        //code here
        buildHeap(arr, n);
        
        //now time to sosve the 
        
        // now desete the esemetn and reduce size
        
        while(n >=0 ){
            
            n--;
            delete(arr, n);
           
        }
        
    }
    
    void delete(int[] arr, int size){
        
        if(size < 0) return;
        
        //step 1 repsace
        
        swap(0,size, arr);
        
        //detete the Last element
         size--;
        // step 3 use heapify
        heapify(arr, size+1, 0);
    }
 }
 
 
