T& S= O(n)
==========================================

using the bfs
// last elemetn of every level
ArrayList<Integer> rightView(Node node) {
        
        ArrayList<Integer>  ans = new ArrayList<Integer>();
        
        
        Deque<Node> q = new LinkedList<>();
        
        q.add(node);
        
        while( !q.isEmpty()){
            
            // size of current lv
            
            int size = q.size();
            
            int lastElementOflvl = -1;
            
            for(int i =0; i < size; i++){
                
                Node temp = q.poll();
                
                lastElementOflvl = temp.data; // in replace of this

/* or 
 if (i == size - 1) {
                ans.add(temp.data);
            }
*/
                
                if(temp.left != null){
                    
                    q.add(temp.left);
                    
                }
                if(temp.right != null){
                    
                    q.add(temp.right);
                    
                }
            }
            
            // level has complete 
            // in int lastelemof lvl meai hamara last element of lvl hoga jo ans ka part hai
            
            ans.add(lastElementOflvl);
        }
        return ans;
        
    }
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

using the recurstion

 ArrayList<Integer> rightView(Node node) {
        
        ArrayList<Integer>  ans = new ArrayList<Integer>();
        
        
        solve(node,0, ans);
        
        return ans;
        
    }
    
    void solve( Node root, int lvl,ArrayList<Integer>  ans ){
        
        
        if( root == null){
            
            return ;
        }
        
        if(lvl == ans.size()){
            
            ans.add(root.data);
        }
        
         if( root.right != null){
            
            solve(root.right,lvl +1, ans);
        }
    
        
        if( root.left != null){
            
            solve(root.left,lvl +1, ans);
        }
        
    }      
