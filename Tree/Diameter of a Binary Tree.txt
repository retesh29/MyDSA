T=O(n)
S= O(n) // because of recursion
class Solution {

    // Function to return the diameter of a Binary Tree.
    int diameter(Node root) {
        // Your code here
        // T&S = O(n)
        return diameterFast(root).d;
    }

    class Pair {
        int d; // diameter
        int h; // height

        Pair(int d, int h) {
            this.d = d;
            this.h = h;
        }
    }

    Pair diameterFast(Node root) {
        if (root == null) {
            return new Pair(0, 0);
        }

        // Calculate left and right pairs
        Pair left = diameterFast(root.left);
        Pair right = diameterFast(root.right);

        // Calculate diameter and height for the current node
        int op1 = left.d;
        int op2 = right.d;
        int op3 = left.h + right.h + 1;

        // Calculate the height for the current node
        int currentHeight = Math.max(left.h, right.h) + 1;

        // Return the pair with updated diameter and height
        return new Pair(Math.max(op1, Math.max(op2, op3)), currentHeight);
    }
}


=------------------------------------------------------------------------------------
// time complexity = N^2 

// Function to return the diameter of a Binary Tree.
    int diameter(Node root) {
        // Your code here
        
        // it it T= O(n^2 ) that is bad time complexity
        
        //base case
        
        if( root == null){
    
            return 0;
        }
        
        
        int h1 = diameter(root.left);
        int h2 = diameter(root.right);
        int h3 = height(root.left) + height(root.right)+1;
        
        
        return Math.max(h1, Math.max(h2,h3) );
        
    }
