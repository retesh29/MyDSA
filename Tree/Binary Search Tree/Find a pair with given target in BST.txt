    public int isPairPresent(Node root, int target)
    {
        // Write your code here
        // to soter previosu nodes
        HashSet<Integer> s = new HashSet<>();
        
        
        return solve(root, target,s);
        
    }
    
    int solve(Node root, int target, HashSet<Integer> s){
        
        if(root == null) return 0;
        
        // to searh in left ans checking ans we get or not
        if( solve(root.left, target, s) == 1){
            
            return 1;
        }
        
        // chenking target - root = contains means we have same  pair
        if(s.contains(target - root.data )){
            
            return 1;
        }
        
        //adding cur data in set
        
        s.add(root.data);
        
        // other wise ching in right
        
        return solve(root.right, target, s);
        
        
    }

===============================================
    public int isPairPresent(Node root, int target)
    {
        // using the inoder traversal space
        
        ArrayList<Integer> inorder = new ArrayList<>();
        
        // step 1 find inorder
        toInorder(root,inorder);
        
        // step 2 two Sum in array
        
        int i = 0;
        int j = inorder.size() -1;
        
        while( i < j){
            
           int sum = inorder.get(i) + inorder.get(j);
          
           if( sum == target){
                
                return 1;
            }else if( sum > target){
                
                j--;
            }else{
                
                i++;
            }
        }
        
        return 0;
    }
    
    void toInorder(Node root, ArrayList<Integer> inorder ){
        
        if(root == null){
            
            return;
        }
        
        toInorder(root.left, inorder);
        
        inorder.add(root.data);
        
        toInorder(root.right, inorder);
    }
